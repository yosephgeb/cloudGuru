https://docs.docker.com/engine/security/protect-access/

Signing images
- Docker content truest(DCT) provides a secure way to verify the integrity of images before you pull or run them on your system.
- with DCT, the image creator signs each image with a certificate, which clients can use to verify the image before running it.

--- docker trust key generate <signer name>
- this gives user access to sign images for a repository

--- docker trust signer add --key <key file> <signer name> <repo>
- this add a signer to a repo

--- docker trust sign <repo>:<tag>
- this sign an image and push it to the registry.

steps
--- docker login
--- cd ~/ to check if you are in your home directory
--- docker trust key generate thorfry(dockerhub username)
- make note of the passphrase if you give one
--- docker trust signer add --key thorfry.pub(file generated by the previous command. .pub means public) thorfry(docker hub username) thorfry/dct-test(directory or repo create on the docker hub that files are going to be put in) 
- Now you have add yourself as a signer

--- mkdir dct-test
--- create a docker file 
--- docker built -t thorfry/dct:unsigned . this is unsiged
--- docker push willbla/dct-test:unsigned

Enabling DCT
--- export DOCKER_CONTENT_TRUST=1 -: we are setting the environment variable
--- export DOCKER_CONTENT_TRUST=0 -: disabling the DCT
DCT can be enabled by setting the DOCKER_CONTENT_TRUST environment variable to 1
- in Docker enterprise edition, you can also enable it in daemon.json
- when DCT is enabled, Docker will only pull and run signed images or else it will result in an error message.
--- When DOCKER_CONTENT_TRUST=1, then docker will automatically sign the image before pushing it.

- unsigned images wont be able to run when it DCT is on.
--- docker build -t thorfry/dct-test:signed .
--- docker trust sign thorfry/dct-test:signed
- this is also going to push it after signing it.
- docker push will also sign it and act as docker trust sign when the DOCKER_CONTENT_TRUST is set to 1



Namespaces and Cgroups
- namespaces and control groups(Cgroups) provide isolation to containers.

Docker Daemon Attack Surface
- it is important to note that the docker daemon itself requires root privileges. Therefor, you should be aware of the potential attack surface presented by the docker daemon.
- only allow trusted users to access the daemon. control of the docker daemon could allow the entire host to be compromised.

Linux kernel capabilities
- Docker uses capabilities to fine-tune what container processes can access.
- this means that a process can run as root inside a container, but does not have access to do everything a root could normally do on the host.
- in Linux you have to be a root user in the host to listen to port below 1024
- For example, docker uses the net_bind_service capabilities to allow container processes to bind to a port below 1024 without running as root in the host but only on the container level

Encrypting Overlay networks
- Containers on overlay networks that are in a swarm can be encrypted. i.e. the communication between them by using the --opt encrypted flag when creating an overlay network to encrypt it.
- we can do that by crating a network with the flat --opt encrypted  and then create  services and make them to use the network created using the --opt encrypted flag.
--- docker network create --opt encrypted --driver overlay NETOWRK
--- docker service create --name my-nginx --network NETWORK --replicas 3 nginx
--- docker service create --name my-busybox --network NETWORK curlimages/curl sh -c 'curl mynginx:80 sleep 3600'
--- docker service logs my-busybox

MTLS in Docker Swarm
- Docker swarm provides additional security by encrypting communication between various components in the cluster.
Mutually Authenticated Transport Layer Security(MTLS)
- Both the server and the client is authenticated. So the client know the server is the server and the server know the client is the client.
- Both participants in communication exchange certificates and all communications is authenticated and encrypted
- in a swarm every component is authenticated like each nodes and so on communication between managers and workers.
- when a swarm is initialized, a root certificate authority(CA) is created. which is used to generate certificates for all nodes as they join the cluster.
- worker and manager tokens are generated using the CA and are used to join new nodes to the cluster.
- used for all cluster-level communication between swarm nodes.
- enabled by default

Securing the Docker daemon HTTP Socket
- docker uses a socket that is not exposed to the network by default. That is there is no way to communicate with the docker daemon outside the server or remotely.
- However, you can configure docker to listen on an HTTP port, which you can connect to in order to remotely manage the daemon.
- in order to do this securely, we need to
1. create a certificate authority.
2. create server and client certificates.
3. configure the daemon on the server to use TLS verify mode(tlsverifymode)
4. configure the client to connect securely using the client certificate.











































